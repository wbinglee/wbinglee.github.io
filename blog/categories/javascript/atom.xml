<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Wenbing Li]]></title>
  <link href="http://blog.wenbing.dev/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.wenbing.dev/"/>
  <updated>2019-04-06T07:58:36-07:00</updated>
  <id>http://blog.wenbing.dev/</id>
  <author>
    <name><![CDATA[Wenbing Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[读《PPK on JavaScript》]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/07/07/read-ppk-on-javascript/"/>
    <updated>2009-07-07T16:53:46-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/07/07/read-ppk-on-javascript</id>
    <content type="html"><![CDATA[<p> <a href="http://www.quirksmode.org/">PPK</a>也是在JavaScript世界中的风云人物了，这位老兄对于浏览器端的技术以及各种浏览器的兼容性有极其丰富的经验。在这本书中，他谈了很多关于可访问性(Accessibility)和可用性(Usability)的一些问题，非常有趣。比如他说“不同的开发者以不同的方式诠释了JavaScript的目的。简单而形象地说就是：深受CSS革命影响的传统Web开发者们，创建的是瘦的、可访问性很强、乱糟糟的JavaScript代码；而来至服务器端开发的‘资深程序员们’用完美的面向对象代码、创建的是胖的、可访问性很差的Ajax客户端”。显然，ppk同学应该属于写乱糟糟但可访问性很好的人，而现在我做的大量事情却是后者。他更多相信现在的Ajax只是一种泡沫，当这个泡沫破灭并且大量‘资深服务器程序员’消失时，JS的开发者会更加注重可访问性。  可能体会不到ppk经历浏览器各种痛苦的经历，但是总体来说浏览器都在坚定地遵循Web标准，JavaScript的支持也会成为浏览器必备要求。anyway，事情总在发展，好戏在后头。分享一下我觉得这本书中几个有趣的地方。</p>

<h3>可访问性和可用性</h3>

<p>可访问性(<a href="http://en.wikipedia.org/wiki/Accessibility">Accessibility</a>)是指你的网页对于任何人、在任何环境下都是可持续访问的。特别是指某些用户，比如弱视、浏览器不支持JavaScript或者另外一些情况，比如用户使用Mobile使用你的网页等等。而可用性(Usability)是指使用或者浏览你的网页的容易程度(这里我们只谈web页面),通常它指我们能更有效率地使用、更容易地学习以及更加满意地使用它。举个例子来说，你让你的web页面支持IE6，或者支持mobile都是在提高它的可访问性；而是用CSS来改善布局让用户更容易阅读、使用JavaScript做一些对用户有帮助的互动都是在提高它的可用性。</p>

<p>Web页面都是由下面三个层组成的，通过它们我们可以了解到它们之间的关系以及它们和可访问性和可用性之间的关系。</p>

<ul>
<li><p>HTML结构层</p></li>
<li><p>CSS表现层</p></li>
<li><p>JavaScript行为层</p></li>
</ul>


<p><img src="http://liwenbing.cn/wp-content/uploads/2009/07/web3layers-300x245.PNG" alt="web3layers" /></p>

<p>Web页面的三个层，HTML结构层是必需的基础，CSS表现层和JavaScript行为层建于它之上。所以在客户端代码中不得不关注的话题就是这三个层的关注点分离。具体探讨一下这三个的分离：</p>

<p><strong>表现与结构的分离(CSS与HTML)</strong></p>

<p>这个分离很好理解，基本思想就是确保HTML来定义结构，而所有的表现都定义在另外单独的CSS文件中。HTML不应该出现<code>&lt;font&gt;</code>标签和用于表现的表格。如果想定义字体和布局，都应该在CSS中处理。</p>

<p>大部分情况下面我们知道达到某个效果是修改表现或者结构是清楚的。但是有些情况下当更改HTML和修改CSS都可以时，你需要慎重地思考到底哪种是合理的。比如一个节点，你希望它不显示，那么你可以在HTML上面删除该节点或者使用CSS来“display:none”。当这种情况是，需要自己分析所需要的效果属于哪种情况，然后修改合理的层。</p>

<p><strong>行为与结构的分离(JavaScript与HTML)</strong></p>

<p>这个也比较好理解，就是不要把任何的JavaScript代码写到你的HTML页面中。应该把所有JavaScript代码放到一个独立的js文件中，然后将它链入到所有需要它的HTML页面中。</p>

<p>关于这个有一个有趣的话题就是：<strong>无侵入脚本编程(unobtrusive scripting).</strong>简单来说它就是通过HTML和JavaScript的分离以达到页面的可访问性和可用性的最大化。既JavaScript失效了，页面还是可阅读和理解的；而通过引入脚本和JavaScript的hook，就可以让脚本运行，增强可用性。</p>

<p><strong>行为与表现的分离(JavaScript与CSS)</strong></p>

<p>这个的分离是非常复杂的，而且并没有总结出什么特别系统的规则。CSS和JavaScript是有重合的灰色地带的，有时候完全不能确切地把某个效果归为表现还是行为。比如是使用CSS中的hover还是JavaScript的mouseover/mouseout。基本来说你自己得根据具体情况做合理的选择吧。</p>

<h3>事件捕捉模型</h3>

<p>在HTML的事件模型中有一个有趣的话题。这个简单的问题就是：如果一个节点和它的父亲节点都有对同一个事件的处理，那么到底哪个事件会被先执行呢？这就是关于事件的冒泡和捕获。事件冒泡是说事件从它的目标元素开始，沿着文档树依次向上冒泡，并触发相应的事件处理函数。而事件的捕捉是刚好相反的，它从文档的第一级开始，然后沿着文档树向下游，知道事件目标为止。</p>

<p>在W3C模型中，捕获和冒泡都会发生。当一个事件触发时，它先被文档捕获，到了事件目标后，再冒泡到文档顶层。而传统模型和微软模型只支持事件冒泡，而不支持事件捕获。所以最好是限制使用事件冒泡。其实在我们的实际编程中，很少关心这个话题，是因为大部分情况我们都只使用了事件冒泡。</p>

<p>更加具体的可以查看ppk的文章：<a href="http://www.quirksmode.org/js/events_order.html">http://www.quirksmode.org/js/events_order.html</a></p>

<h3>小记</h3>

<p>应该来说PPK所谈的JavaScript是一个更加全面的浏览器编程的世界，让人可以全面来了解这个世界包含的东西。其实大部分的内容在PPK的网站上都有，值得读读。<a href="http://www.quirksmode.org/js/contents.html">http://www.quirksmode.org/js/contents.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dojo Widget的析构过程]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/06/05/dojo-widget-destructor/"/>
    <updated>2009-06-05T04:09:13-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/06/05/dojo-widget-destructor</id>
    <content type="html"><![CDATA[<p>了解dojo widget（或者说dijit）的析构过程，不仅让你更加了解整个dijit的生命周期，同样也能帮助我们在自己定制化的dijit中如何正确地释放资源。（这里讨论的dojo应该是在0.9或者以上版本的)</p>

<p>下面是dijit的析构过程：</p>

<pre><code>                        destroyRecursive
                    /                      \
                destroy                   destroyDescendants
        /        |        \
uninitialize  disconnect() destroyRendering
</code></pre>

<p>一些常见的<strong>错误</strong>是如下：</p>

<ul>
<li><p>使用destroy()去销毁一个dijit。我们应该使用destroyRecursive()去销毁一个dijit，从上面的过程可以看出，destroyRecursive()会销毁其孩子widgets。</p></li>
<li><p>使用destory()去销毁定制dijit中的资源。更可怕的是有的代码可能是直接覆盖destroy，而根本不调用_Widget中的destory。uninitialize()才是dijit暴露出来给定制化widget进行析构的stub function。</p></li>
</ul>


<h3>结论</h3>

<p><strong>使用destroyRecursive()去销毁dijit，使用uninitialize()在定制化的dijit来释放自己的资源</strong>。destroyDescendants，destroyRendering基本上用不到，也不要去覆盖它们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么Firefox 3不能加载本地的JavaScript文件了？]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/06/05/why-ff3-cannot-load-local-javascript-file/"/>
    <updated>2009-06-05T01:36:38-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/06/05/why-ff3-cannot-load-local-javascript-file</id>
    <content type="html"><![CDATA[<p>一段时间来一直受这样的困扰，就是我的Firefox无法运行本地的dojo的测试文件。一直以为是我的firefox或者机器出了什么问题，就只好去使用IE或者Chrome去运行这些测试例子，可惜不能用firebug的确让人很不爽。</p>

<p>今天在firebug查看了一些错误情况，报错居然是“Access to restricted URI denied”。这个明显是跨域访问的错误，但是本地文件怎么报这样的错呢？在Firefox的about:config搜索了一下policy,居然找到了原因所在，原来Firefox对于本地文件也进行了同源访问的安全设置,配置参数是：security.fileuri.strict_origin_policy。这个新的设置只是在firefox 3才被加入，并且默认是开启的。不过你也可以将这个关掉，这样就可以如同以前那样运行本地的dojo测试用例，或者其它你想本地加载的JavaScript文件。</p>

<p><a href="http://liwenbing.cn/2009/06/05/why-ff3-cannot-load-local-javascript-file/local-file-p-origin-policy/"><img src="http://liwenbing.cn/wp-content/uploads/2009/06/local-file-p-origin-policy-300x42.png" alt="local-file-p-origin-policy" /></a></p>

<p>继续在google了一下，找了这个"feature"的由来，<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=230606">https://bugzilla.mozilla.org/show_bug.cgi?id=230606</a>，大概是说本地的文件如果没有这样的限制，可以访问本机的其他文件，这样会造成安全隐患。John Resig（Father of  jQuery) 也有一个blog关于这个问题，<a href="http://ejohn.org/blog/tightened-local-file-security/">http://ejohn.org/blog/tightened-local-file-security/</a>，下面的评论也挺值得看看的。</p>

<p><strong>More Links: </strong></p>

<ul>
<li><p><a href="http://www.dojotoolkit.org/support/faq/why-does-dojo-fail-load-file-urls-firefox-3">http://www.dojotoolkit.org/support/faq/why-does-dojo-fail-load-file-urls-firefox-3</a></p></li>
<li><p><a href="http://kb.mozillazine.org/Security.fileuri.origin_policy">http://kb.mozillazine.org/Security.fileuri.origin_policy</a></p></li>
<li><p><a href="http://kb.mozillazine.org/Security.fileuri.strict_origin_policy">http://kb.mozillazine.org/Security.fileuri.strict_origin_policy</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中==等同运算符的类型转换]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/05/21/javascript-equal-type-conversion/"/>
    <updated>2009-05-21T21:59:18-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/05/21/javascript-equal-type-conversion</id>
    <content type="html"><![CDATA[<p>这周在给一些新员工讲JavaScript的时候，谈了==和===的区别，本质来说，===是严格的等同运算符，要求两者类型相同并且值相同；而==运算符在做比较时，会做一定的类型转换。我们在使用过程中应该使用===而不是==，因为这种类型转换后的比较往往都不是你想要的。当时列出了corckfork最喜欢一些例子：</p>

<pre><code>    '' == '0'          // false
    0 == ''            // true
    0 == '0'           // true
    false == 'false'   // false
    false == '0'       // true
    false == undefined // false
    false == null      // false
    null == undefined  // true
    ' \t\r\n ' == 0    // true
</code></pre>

<h3>转换规则</h3>

<p>当时有人就问了，那么在做类型转换的时候倒是等式的左边向右边转，还是反过来呢？其实这些都是不对的，我们去看看ECMAScript的规范，会发现它有对于等同运算符做类型转换很明确的比较算法，下面我将其翻译如下:
<strong>对于比较x==y，</strong></p>

<p>1.如果x和y类型不同，那么到14步；
//
//2-13步，为类型相同的比较
//
14.如果x是null，y是undefined，返回true；
15.如果x是undefined，y是null，返回true；
16.如果x是Number，y是String，将y转化成Number，然后再比较；
17.如果x是String，y是Number，将x转化成Number，然后再比较；
18.如果x是Boolean，那么将x转化成Number，然后再比较；
19.如果y是Boolean，那么将y转化成Number，然后再比较；
20。如果x是String或者Number，y是Object，那么将y转化成基本类型，再进行比较；
21.如果x是Object，y是String或者Number，将x转化成基本类型，再进行比较；
22.其他情况均返回false；</p>

<p>ECMA这帮人写的算法过程比较啰嗦，简单一句话来概括就是，对于基本类型Boolean，Number，String，三者之间做比较时，总是向Number进行类型转换，然后再比较；如果有Object，那么将Object转化成这三者，再进行比较；对于null和undefined，只有x，y分别是它们时才相同，其他都为false。</p>

<p>另外，对于转化到Number的算法，细节可以来看ECMAScript的规范，但是基本上下面这个<a href="http://www.jibbering.com/faq/faq_notes/type_convert.html#tcNumber">几个表</a>可以覆盖大部分的内容:</p>

<p>type-convert to number (+col) : String Values.</p>

<p>&ldquo;&rdquo;
(empty
string)
&ldquo;-1.6&rdquo;
&ldquo;0&rdquo;
&ldquo;1&rdquo;
&ldquo;1.6&rdquo;
&ldquo;8&rdquo;
&ldquo;16&rdquo;
&ldquo;16.8&rdquo;</p>

<p>+col</p>

<p>0</p>

<p>-1.6</p>

<p>0</p>

<p>1</p>

<p>1.6</p>

<p>8</p>

<p>16</p>

<p>16.8</p>

<p>type-convert to number (+col) : String Values.</p>

<p>&ldquo;123e-2&rdquo;
&ldquo;010&rdquo;
(Octal)
&ldquo;0x10&rdquo;
(Hex)
&ldquo;0xFF&rdquo;
(Hex)
&ldquo;-010&rdquo;
&ldquo;-0x10&rdquo;
&ldquo;xx&rdquo;</p>

<p>+col</p>

<p>1.23</p>

<p>10</p>

<p>16</p>

<p>255</p>

<p>-10</p>

<p>NaN</p>

<p>NaN</p>

<p>type-convert to number (+col) : Other Values.</p>

<p>undefined
null
true
false
new Object()
function(){
return;
}</p>

<p>+col</p>

<p>NaN</p>

<p>0</p>

<p>1</p>

<p>0</p>

<p>NaN</p>

<p>NaN</p>

<p>再回头来看看corkford给出的例子，然后使用上面的规则去判断；</p>

<pre><code> '' == '0'          // false
//类型相同，毫无疑问，值不同，所以结果为false

0 == ''            // true
//String要像Number转化，''是空String，根据上面的表，转成0，所以结果是true

0 == '0'           // true
//String要像Number转化，根据上面的转化Number表，'0'转成0，所以结果是true

false == 'false'   // false
//有Boolean，转化成Number，所以第一步转化后为0=='false'；
//然后'false'向Number转，结果是NaN,最后变成比较0==NaN,那么肯定是false。
//（NaN和任何相比都是false，就算是自己也是false， NaN==NaN //false)

false == '0'       // true
//有Boolean，转化成Number，经过第一次转化就成了0=='0';
//就变成了上面的第3个例子，所以是true

false == undefined // false
//对于undefined和null，只有两边分别是两者才是true，其他都是false；所以是false

false == null      // false
//对于undefined和null，只有两边分别是两者才是true，其他都是false；所以是false

null == undefined  // true
//对于undefined和null，只有两边分别是两者才是true，其他都是false；所以是true

' \t\r\n ' == 0    // true
//对于String，先转成Number，对于空String，都将转成0，所以转化后成为0==0,结果为true
//（注意，空字符不仅仅是只是空格，还包括\t\r\n等等，更多可以见ECMAScript spec的9.3.1）
</code></pre>

<h2>总结</h2>

<p>虽然我们了解了==这个坏东西的本质，但是在我们的实际JavaScript编程中是要避免使用==，而是去使用===这个严格的比较运算符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac机上搭建Projectzero的Build环境]]></title>
    <link href="http://blog.wenbing.dev/blog/2008/11/24/set-up-projectzero-build-environment-in-mac/"/>
    <updated>2008-11-24T07:56:02-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2008/11/24/set-up-projectzero-build-environment-in-mac</id>
    <content type="html"><![CDATA[<p>一直想在本地建立zero的Build环境，无奈总是太耗时，也没有机器，现在有了mac在旁边，当然要拿它来做build的环境了。最近几天下班后都要整一会这个，现在终于是过了，在欢快地BUILD,TEST&hellip;.</p>

<p>所有的应该参考：<a href="http://www.projectzero.org/wiki/bin/view/Development/Build">http://www.projectzero.org/wiki/bin/view/Development/Build</a>。下面一步一步来讲吧。</p>

<ol>
<li>Check out code.</li>
</ol>


<p>这个比较简单了。对于zero现在不同的版本最好是建立对于的结构，这样以后做不同的build也利于管理。Mac已经内置了svn，所以直接敲就可以了。打开酷酷的Terminal，敲吧。。</p>

<pre><code>mkdir zero
cd  zero
mkdir sebring
mkdir silverstone
cd sebring
mkdir source
cd source
svn checkout https://www.projectzero.org/svn/zero/trunk --username liwenb --password 
</code></pre>

<p>然后等着吧，喝点咖啡，论坛逛逛。。。。</p>

<p>终于checkout了zero所有的code了，嘿嘿。那么要不试试呗，</p>

<pre><code>cd trunk/BUILD/zero.build/
ant -f zbuild.xml BUILD
</code></pre>

<p>很好，开始build了。。。嗯，nice。。。咋啦咋啦，错了？什么标签不支持（我现在是不记得了).看来是因为ant的版本的问题。查查看：</p>

<p>ant -version</p>

<p>哦，原来是1.7，而zero指明需要1.7.1，那么没有办法，安装呗。</p>

<p>2.安装ant 1.7.1</p>

<p>这个倒是简单啦，去<a href="http://ant.apache.org/bindownload.cgi">http://ant.apache.org/bindownload.cgi</a>.解压，那么到底放到哪里呢？于是查看了一下ant的实际地址。原来mac装在了/usr/share/ant/. 反正我也用不着它的旧的，干脆替换吧。</p>

<p>cp -R apache-ant-1.7.1 /usr/share/ant/</p>

<p>什么什么？没有权限！？查看后是这些文件是root的用户文件。之前也遇到过这个问题，想删除一个root用户的文件，可惜总是没有权限。问了mark老大，也不知道root的用户哪里去了。Google了一把，才知道原来对于Mac机，root用户是需要自己来启动的。好，去启动</p>

<p>3.启动Mac的root用户</p>

<p>当然看到apple的help就可以完成这个了，<a href="http://support.apple.com/kb/HT1528">http://support.apple.com/kb/HT1528</a>。</p>

<p>ok，su root, 将ant替换原来的。 好，再试试，ant -f zbuild.xml BUILD。什么错？zso&hellip;?OK，zero的build中是需要build一个native的code，对于Mac需要安装Xcode。</p>

<p>4.安装Xcode 到Mac上</p>

<p>默认来说，mac是没有安装这些的。只需要找到第二张安装盘就可以了，很容易就安装上了。如果没有安装盘，那么就可以follow这个来安装了。<a href="http://www.macworld.com/article/46286/2005/08/installxcode.html">http://www.macworld.com/article/46286/2005/08/installxcode.html</a>.</p>

<p>好，再来ant -f zbuild.xml BUILD。。。很好，10分钟一直在跑，嗯？eclipse的plugin的build有问题。没办法回去看前提要求吧，原来是需要配置jdk和eclipse的。</p>

<p>5.配置eclipse</p>

<p>这个简单了。到<a href="http://aeneis.raleigh.ibm.com/prereqs/eclipse/">http://aeneis.raleigh.ibm.com/prereqs/eclipse/</a>copy过来，注意download macosx的就好了，根据要求unzipped in your {prereqs directory}/eclipse/3.3.2就可以了。</p>

<p>6.配置JDK</p>

<p>根据Michael的说明，# create a link from zero.build/prereqs/jdks/java5 to  /System/Library/Frameworks/JavaVM.framework/Versions/1.5/Home</p>

<p>好ln java5 &hellip;..</p>

<p>7.完成，:)</p>

<p>再ant -f zbuild.xml BUILD，等上15分钟，就可以看到success的信息了。如果你要跑TEST,那可能就要等好几个小时了。</p>

<p><a href="http://liwenbing.cn/wp-content/uploads/2008/11/terminal.png"><img src="http://liwenbing.cn/wp-content/uploads/2008/11/terminal-300x192.png" alt="" /></a></p>

<p>P.S. 本来是上周末的文章，放到draft就到了现在，kaka..</p>
]]></content>
  </entry>
  
</feed>
