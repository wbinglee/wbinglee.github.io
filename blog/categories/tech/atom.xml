<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Wenbing Li]]></title>
  <link href="http://blog.wenbing.dev/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://blog.wenbing.dev/"/>
  <updated>2019-04-10T21:28:55-07:00</updated>
  <id>http://blog.wenbing.dev/</id>
  <author>
    <name><![CDATA[Wenbing Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[读《PPK on JavaScript》]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/07/07/read-ppk-on-javascript/"/>
    <updated>2009-07-07T16:53:46-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/07/07/read-ppk-on-javascript</id>
    <content type="html"><![CDATA[<p> <a href="http://www.quirksmode.org/">PPK</a>也是在JavaScript世界中的风云人物了，这位老兄对于浏览器端的技术以及各种浏览器的兼容性有极其丰富的经验。在这本书中，他谈了很多关于可访问性(Accessibility)和可用性(Usability)的一些问题，非常有趣。比如他说“不同的开发者以不同的方式诠释了JavaScript的目的。简单而形象地说就是：深受CSS革命影响的传统Web开发者们，创建的是瘦的、可访问性很强、乱糟糟的JavaScript代码；而来至服务器端开发的‘资深程序员们’用完美的面向对象代码、创建的是胖的、可访问性很差的Ajax客户端”。显然，ppk同学应该属于写乱糟糟但可访问性很好的人，而现在我做的大量事情却是后者。他更多相信现在的Ajax只是一种泡沫，当这个泡沫破灭并且大量‘资深服务器程序员’消失时，JS的开发者会更加注重可访问性。  可能体会不到ppk经历浏览器各种痛苦的经历，但是总体来说浏览器都在坚定地遵循Web标准，JavaScript的支持也会成为浏览器必备要求。anyway，事情总在发展，好戏在后头。分享一下我觉得这本书中几个有趣的地方。</p>

<h3>可访问性和可用性</h3>

<p>可访问性(<a href="http://en.wikipedia.org/wiki/Accessibility">Accessibility</a>)是指你的网页对于任何人、在任何环境下都是可持续访问的。特别是指某些用户，比如弱视、浏览器不支持JavaScript或者另外一些情况，比如用户使用Mobile使用你的网页等等。而可用性(Usability)是指使用或者浏览你的网页的容易程度(这里我们只谈web页面),通常它指我们能更有效率地使用、更容易地学习以及更加满意地使用它。举个例子来说，你让你的web页面支持IE6，或者支持mobile都是在提高它的可访问性；而是用CSS来改善布局让用户更容易阅读、使用JavaScript做一些对用户有帮助的互动都是在提高它的可用性。</p>

<p>Web页面都是由下面三个层组成的，通过它们我们可以了解到它们之间的关系以及它们和可访问性和可用性之间的关系。</p>

<ul>
<li><p>HTML结构层</p></li>
<li><p>CSS表现层</p></li>
<li><p>JavaScript行为层</p></li>
</ul>


<p><img src="http://liwenbing.cn/wp-content/uploads/2009/07/web3layers-300x245.PNG" alt="web3layers" /></p>

<p>Web页面的三个层，HTML结构层是必需的基础，CSS表现层和JavaScript行为层建于它之上。所以在客户端代码中不得不关注的话题就是这三个层的关注点分离。具体探讨一下这三个的分离：</p>

<p><strong>表现与结构的分离(CSS与HTML)</strong></p>

<p>这个分离很好理解，基本思想就是确保HTML来定义结构，而所有的表现都定义在另外单独的CSS文件中。HTML不应该出现<code>&lt;font&gt;</code>标签和用于表现的表格。如果想定义字体和布局，都应该在CSS中处理。</p>

<p>大部分情况下面我们知道达到某个效果是修改表现或者结构是清楚的。但是有些情况下当更改HTML和修改CSS都可以时，你需要慎重地思考到底哪种是合理的。比如一个节点，你希望它不显示，那么你可以在HTML上面删除该节点或者使用CSS来“display:none”。当这种情况是，需要自己分析所需要的效果属于哪种情况，然后修改合理的层。</p>

<p><strong>行为与结构的分离(JavaScript与HTML)</strong></p>

<p>这个也比较好理解，就是不要把任何的JavaScript代码写到你的HTML页面中。应该把所有JavaScript代码放到一个独立的js文件中，然后将它链入到所有需要它的HTML页面中。</p>

<p>关于这个有一个有趣的话题就是：<strong>无侵入脚本编程(unobtrusive scripting).</strong>简单来说它就是通过HTML和JavaScript的分离以达到页面的可访问性和可用性的最大化。既JavaScript失效了，页面还是可阅读和理解的；而通过引入脚本和JavaScript的hook，就可以让脚本运行，增强可用性。</p>

<p><strong>行为与表现的分离(JavaScript与CSS)</strong></p>

<p>这个的分离是非常复杂的，而且并没有总结出什么特别系统的规则。CSS和JavaScript是有重合的灰色地带的，有时候完全不能确切地把某个效果归为表现还是行为。比如是使用CSS中的hover还是JavaScript的mouseover/mouseout。基本来说你自己得根据具体情况做合理的选择吧。</p>

<h3>事件捕捉模型</h3>

<p>在HTML的事件模型中有一个有趣的话题。这个简单的问题就是：如果一个节点和它的父亲节点都有对同一个事件的处理，那么到底哪个事件会被先执行呢？这就是关于事件的冒泡和捕获。事件冒泡是说事件从它的目标元素开始，沿着文档树依次向上冒泡，并触发相应的事件处理函数。而事件的捕捉是刚好相反的，它从文档的第一级开始，然后沿着文档树向下游，知道事件目标为止。</p>

<p>在W3C模型中，捕获和冒泡都会发生。当一个事件触发时，它先被文档捕获，到了事件目标后，再冒泡到文档顶层。而传统模型和微软模型只支持事件冒泡，而不支持事件捕获。所以最好是限制使用事件冒泡。其实在我们的实际编程中，很少关心这个话题，是因为大部分情况我们都只使用了事件冒泡。</p>

<p>更加具体的可以查看ppk的文章：<a href="http://www.quirksmode.org/js/events_order.html">http://www.quirksmode.org/js/events_order.html</a></p>

<h3>小记</h3>

<p>应该来说PPK所谈的JavaScript是一个更加全面的浏览器编程的世界，让人可以全面来了解这个世界包含的东西。其实大部分的内容在PPK的网站上都有，值得读读。<a href="http://www.quirksmode.org/js/contents.html">http://www.quirksmode.org/js/contents.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么用twitter？]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/05/01/how-to-use-twitter/"/>
    <updated>2009-05-01T10:12:09-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/05/01/how-to-use-twitter</id>
    <content type="html"><![CDATA[<p>09年是year of twitter, 这个东西现在火的一塌糊涂，google和facebook对它是羡慕的不得了。国内IT圈中也是刮起了一阵twitter风，好像你没有个twitter都不好意思和别人打招呼。但是当你屁颠屁颠地在上面发点东西的时候，也同时也被大量的信息噪音给淹没。有的人用twitter在聊天，有的人发布的信息非常多但是毫无意义，慢慢地这个东西成为了一种负担。其实twitter火起来有它的原因，但要看怎么来用了。</p>

<p>twitter来至一个简单的想法，告诉别人你在做什么。现在有很多的工具来帮助人们进行交流，比如blog和IM，但是日常发生在自己身上的一些事情使用这样一些工具都不太适合。我们不可以发一个blog告诉别人我在做什么，也不可能在聊天工具上面像疯了似的给每个人发这些消息。然而通过twitter，人们可以进一步加深相互的了解。比如，我的一个好朋友发消息说他在做一道菜。我看到后，很好奇他居然还会做菜呀，于是我们有了公共的兴趣点，可以进一步地聊聊。</p>

<p>从技术上面来讲，twitter的火爆说明了开放API的成功。有了twitter提供的API，就有了它的客户端的繁荣，桌面的、浏览器插件的、手机的&hellip;.任何平台任何环境，只要你想到的都可以找到一堆的twitter客户端。 如果twitter没有这些多的客户端和社区支持，估计也难以流行起来。</p>

<p>话说回来，怎么用twitter呢？我想可以从两点来看，一是你希望收到什么消息；二是你应该给出什么样信息。关于收到什么消息，基本的原则应该是：<strong>只follow你所关心的人和事</strong>。前端日子follow了很多技术名人的twitter，发现他们发的信息根本都不是我关心的。我并不是他们的朋友，我根本不关心你和谁吃饭了，你今天去哪里运动了。所以很简单，将你并不认识的名人从你的follow列表中删掉，因为你对这些名人其实真正关心只是他的知识，而这些只要订阅他们的blog就可以啦。对于技术和某种事情的关注，follow这个社区的twitter就好了。另外对于那些乱发垃圾消息的人，删除好了。这个世界不是信息太少，而是太多了。</p>

<p>那用twitter应该发什么样的消息呢？我想原则应该是：<strong>只发有用的信息，并且这个信息不需要通过其他消息的上下文就能理解。</strong>如果是个人还是用twitter的本意就好了，就是发你在做什么，或者发现什么有意思的事情。社区类的twitter可以发当然社区发生重要的事情。切忌使用twitter进行聊天了，因为follow你的人并不一定follow了和你聊天的朋友，所以这些没有上下文的消息就毫无意义。</p>

<p>最后我想到了一位美女同事对于twitter的理解，<em>twitter的消息就像一种缘分，你看到了就是一种缘分，不需要像聊天那么有紧迫感，也不像blog那么正式</em>。<strong>所以还是一切随缘吧</strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你的website也social了吗？]]></title>
    <link href="http://blog.wenbing.dev/blog/2008/12/11/diy-your-website-social/"/>
    <updated>2008-12-11T09:10:58-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2008/12/11/diy-your-website-social</id>
    <content type="html"><![CDATA[<p>如果你访问我的website，你可能注意到我的页面中多了两个小东西（我们一般叫gadget），通过它们，你可以加入我的website、看到所有的人、加他们为好友、或者可以留言。嘿嘿，看，我的website也成为social了哦。（一定要给面子加入到我的website，:),）。不过感觉比较遗憾的一点是，朋友之间不能相互地发message，是我漏点了什么吗？</p>

<p>这就是<a href="http://www.google.com/friendconnect/">Google Friend Connect</a>所提供的能力，你只需要copy/paste它提供的HTML到你的页面中就完事了。是不是很简单呢？</p>

<p>Google的确在兑现它的承诺，让所有的website都能容易加入social的能力，并且还是使用最基本的东西(HTML/Javscript)。年初的时候在讲什么OpenSocial，觉得挺玄乎的，并没有搞懂这个东西到底怎么折腾到我的website，也懒得去研究它。现在Friend Connect可以说是提供了一个平民化的social方式 - Copy/Paste HTML总会了吧， 2分钟搞定。</p>

<p>OpenSocial就是提供了一堆的API来帮助你构建你需要的Social能力。当然这个对于需要social能力的商业网站是可行，能力很强，干啥都可以。而Friend Connect就更进一步了，就是将OpenSocial的能力平民化。通过使用OpenSocial的API写相关的OpenSocial gadget，你就可以通过Copy/Paste的方式加入各种各样的gadget。Cool？YES.  当然Friend Connect另外提供了一些基本的login，管理的能力。</p>

<p>看看几个简单的OpenSocial的API (当然就是JavaScript的)：</p>

<ul>
<li><p><strong>API:</strong> <code>opensocial.DataRequest.newFetchPersonRequest('OWNER')</code>
<strong>Site Name:</strong> 李文兵的主页</p></li>
<li><p><strong>API:</strong> <code>opensocial.DataRequest.newFetchPeopleRequest('OWNER_FRIENDS')</code>
<strong>Site Members:。。。。</strong></p></li>
<li><p><strong>API:</strong> <code>opensocial.DataRequest.newFetchPeopleRequest('VIEWER_FRIENDS')</code>
<strong>Viewer friends:。。。</strong></p></li>
</ul>


<p>是不是很cool？你是不是也想抄起code写点东东,呵呵。 当然你也可以找些你喜欢的OpenSocial gadget来用就可以了。<a href="http://opensocialdirectory.org/">http://opensocialdirectory.org/</a>.</p>

<p>未来的mashup会怎么样呢？还有多少infrastructure的东西都被google给占了? 期待&amp;反思。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox会成为新的RCP吗？]]></title>
    <link href="http://blog.wenbing.dev/blog/2008/07/12/will-firefox-be-the-next-rcp/"/>
    <updated>2008-07-12T07:05:19-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2008/07/12/will-firefox-be-the-next-rcp</id>
    <content type="html"><![CDATA[<p>对于firefox的插件大家都觉得属于添加浏览器的功能，这些插件只是firefox中的小甜点，并不能自成一个完整的软件。 我也是一直这么认为，但是今天看到一个用firefox做的画图的工具，<a href="http://www.evolus.vn/Pencil/Home.html">http://www.evolus.vn/Pencil/Home.html</a>，一个和原有插件很不一样的插件。它只是将 <strong>Mozilla Gecko engine</strong>做成了一个画图的工具。并且最特别的地方是大小只有400K，非常的惊人。</p>

<p>觉得firefox非常有希望成为一个RCP的平台，相对Eclipse这样的RCP平台(或者Abode的AIR)来说是有非常多的优势的：</p>

<ul>
<li><p>安装非常的方便:显然firefox的插件安装方式非常方便，点个link就安装了。</p></li>
<li><p>更新同样简单： 同样由firefox自己对插件更新的支持，自动检查更新最新版本。</p></li>
<li><p>软件大小非常小：看一个完整的画图工具只有400K，就知道能它能多小，安装可以多快。使用firefox所提供的对UI等的支持，将js的文件压缩后真的可以非常的小。</p></li>
<li><p>多平台支持：firefox就支持多平台，你写出来的软件也就自然能跑在所有firefox能支持的平台了。</p></li>
<li><p>开发要求低：基本上只需要掌握javascript，而世界上最多程序员的将会是javascript程序员。firefox的UI开发比起HTML，CSS来说是简单的。每个人估计是受到过写HTML，尤其是CSS中要处理多平台的煎熬。从这个角度来说，写firefox的插件比开发一个Rich的Web应用要快很多。</p></li>
<li><p>不需要安装体积庞大的SDK：你只需要firefox就可以了。很多人抱怨abode的SDK或者java的JDK都太大了，而很多非技术人不明白为什么需要安装这些乱七八糟并且几十M的东西，这也是abode的AIR很难快速流行的问题。</p></li>
</ul>


<p>现在也是有很多不太如意的地方：</p>

<ul>
<li><p>每次启动你得从firefox中启动，不能直接在OS的建立快捷方式。我觉得这个问题应该不大，看看<a href="http://labs.mozilla.com/projects/prism/">Prism</a>这样的firefox的lab project就可以了。</p></li>
<li><p>如何来操作数据库？操作数据库是一个基本的，可惜firefox并没有提供这样的支持。wait，firefox 3提供了类似google gears的能力，估计将数据持久化到本地是问题不大。但是连接到传统的数据库mysql等的呢？</p></li>
</ul>


<p>当然firefox从来没有提过它要成为一个RCP的platform，它是否想成为abode AIR的competitor？是否它可以成为新的RCP平台，甚至它是否可以成为<a href="http://en.wikipedia.org/wiki/Rich_Internet_application">RIA</a>平台，让我们试目以待吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google I/O Session]]></title>
    <link href="http://blog.wenbing.dev/blog/2008/06/17/google-io-session/"/>
    <updated>2008-06-17T07:57:57-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2008/06/17/google-io-session</id>
    <content type="html"><![CDATA[<p>这个是google对developer的一个大会，有非常多好的session，做web的都需要关注一下google到底在做什么。在它的keynote 讲了google努力做事情的方向：</p>

<ol>
<li><p>Make the cloud more accessible</p></li>
<li><p>Keep connectivity pervasive</p></li>
<li><p>Make the client more powerful</p></li>
</ol>


<p><a href="http://sites.google.com/site/io/keynote-client-connectivity-and-the-cloud/IO_Keynote_vFINAL.pdf?attredirects=0">Presentation Slides</a>
另外更多的google I/O的session可以从这里找到:
<a href="http://sites.google.com/site/io/">http://sites.google.com/site/io/</a>:所有session的video和slides</p>
]]></content>
  </entry>
  
</feed>
