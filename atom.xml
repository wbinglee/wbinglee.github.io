<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wenbing Li]]></title>
  <link href="http://blog.wenbing.dev/atom.xml" rel="self"/>
  <link href="http://blog.wenbing.dev/"/>
  <updated>2019-04-10T21:28:55-07:00</updated>
  <id>http://blog.wenbing.dev/</id>
  <author>
    <name><![CDATA[Wenbing Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blogging Again]]></title>
    <link href="http://blog.wenbing.dev/blog/2019/04/10/blogging-again/"/>
    <updated>2019-04-10T20:26:34-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2019/04/10/blogging-again</id>
    <content type="html"><![CDATA[<p>时隔上一次的Blog已经4年了，时间过的太快，也发生了很多的事情，匆匆忙忙，浑浑噩噩&hellip;</p>

<p>Blog是很好让自己保持思考和清醒的方式，不管什么原因，买了wenbing.dev这个域名，也把之前的github的blog挂到了blog.wenbing.dev下面。</p>

<p>也很是神奇，通过<a href="https://archive.org">https://archive.org</a> 这个网站找到了之前的一些blog，也算是对于自己的Blog做了一些更新吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber Best Practices]]></title>
    <link href="http://blog.wenbing.dev/blog/2015/01/20/cucumber-best-practices/"/>
    <updated>2015-01-20T12:14:44-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2015/01/20/cucumber-best-practices</id>
    <content type="html"><![CDATA[<p><a href="http://cukes.info/">cucumber</a> is a BDD(Behaviour driver development) framework. Basically test cases are written in plain text which is called Gherkin language, just in Given-When-Then steps. After that, developer will write implementation for those steps.</p>

<p>It&rsquo;s good to bridge the communication between business requirement and implementation. The ideal work flow would be business analysis or QA write features and developer implements them. However, in a real world, developer write both of them. Cucumber is different programming model than what we normmaly use like Java, ruby, etc. It is not mature enough like OO which has tons of patterns and best practices to apply.</p>

<p>Below are some best practices when I use cucumber for one project.</p>

<h2>Write declarative features</h2>

<p>Scenarios should be written like a user would describe them.</p>

<p>Beware of scenarios that only describe clicking links and filling in form fields, or of steps that contain code or CSS selectors. This is just another variant of programming, but certainly not a feature description.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Scenario:</span><span class="nf"> Adding a todo item</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">I have a todo list named &quot;</span><span class="s">Mondays list</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I go to the home page</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I fill in &quot;</span><span class="s">username</span><span class="nf">&quot; with &quot;</span><span class="s">dave</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I fill in &quot;</span><span class="s">password</span><span class="nf">&quot; with &quot;</span><span class="s">secret</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I press &quot;</span><span class="s">Log In</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I go to the todo page</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I click on link &quot;</span><span class="s">Mondays list</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I fill in &quot;</span><span class="s">todo</span><span class="nf">&quot; with &quot;</span><span class="s">Grab some milk</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I press &quot;</span><span class="s">Add todo</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Todo item added successfully</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Good</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Scenario:</span><span class="nf"> Adding a todo item</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">I have a todo list</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I am logged in as a normal user</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I add a todo item</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">It should be added to the todo list</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use <code>As a &lt;role&gt;, I want &lt;goal/desire&gt; So that &lt;benefit&gt;</code> format for feature description</h2>

<p>Describe feature in user story style. Starts the feature and gives it a title, then follow with user story format.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Create an account</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Good</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Create an account</span>
</span><span class='line'><span class="nf">  As a user</span>
</span><span class='line'><span class="nf">  I want to create an account for me</span>
</span><span class='line'><span class="nf">  So that I can re-login to the same account</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> ...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use <code>should</code> in each <code>Then</code> and following <code>And</code> steps</h2>

<p>The purpose of <code>Then</code> steps is to observe outcomes and verify result. Using <code>should</code> word as a convention makes it easy to understand, and make sure do verification in implementation step.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Then </span><span class="nf">My job is displayed in the table</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>*Good</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Then </span><span class="nf">My job should be displayed in the table</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Capitalize first letter of every step</h2>

<p>Each step is independant, capitalize first letter makes a nice format.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Then </span><span class="nf">my job should be displayed in the table</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Good</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Then </span><span class="nf">My job should be displayed in the table</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use page object model</h2>

<p>Don&rsquo;t write implementation in step definition, use page object model.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span><span class="p">(</span><span class="sr">/^I search for my job$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">path_to</span><span class="p">(</span><span class="s1">&#39;manage jobs&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s1">&#39;Filter Jobs&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;users-id-search&#39;</span><span class="p">,</span> <span class="ss">:with</span><span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#users-id-search&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">native</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="ss">:backspace</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;requisition.title&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@job</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>  <span class="n">click_button</span><span class="p">(</span><span class="s1">&#39;Search&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Good</strong></p>

<p><em>job_steps.rb</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span><span class="p">(</span><span class="sr">/^I search for my job$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@app</span><span class="o">.</span><span class="n">manage_job_page</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>  <span class="vi">@app</span><span class="o">.</span><span class="n">manage_job_page</span><span class="o">.</span><span class="n">search</span> <span class="vi">@job</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>manage_job_page.rb</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">job_title</span><span class="p">)</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s1">&#39;Filter Jobs&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;users-id-search&#39;</span><span class="p">,</span> <span class="ss">:with</span><span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#users-id-search&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">native</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="ss">:backspace</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;requisition.title&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="vi">@job</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>  <span class="n">click_button</span><span class="p">(</span><span class="s1">&#39;Search&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use background</h2>

<p>If all the scenario in one feature file have the same steps, put them in the background.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Scenario:</span><span class="nf"> Foo</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am logged in as an admin</span>
</span><span class='line'><span class="nf">  </span><span class="k">And </span><span class="nf">....</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Bar</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am logged in as an admin</span>
</span><span class='line'><span class="nf">  </span><span class="k">And </span><span class="nf">....</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Good</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Background:</span><span class="nf"></span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am logged in as an admin</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Foo</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">....</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Bar</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">....</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use Tags</h2>

<p>Tags are a great way to organise your features and scenarios.</p>

<p><strong>Good</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="nt">@job</span><span class="nf"> </span><span class="nt">@smoke</span><span class="nf"></span>
</span><span class='line'><span class="k">Feature:</span><span class="nf"> Job management</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avoid to use step params</h2>

<p>Step params is a smell which the feature is not declarative.</p>

<p>The parameter in feature should <strong>not</strong> be used as <strong>implementation parameter</strong>.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Given </span><span class="nf">I complete registration from using email &quot;</span><span class="s">test@example.com</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Good</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Given </span><span class="nf">I complete registration form using a valid email</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avoid to use scenario outlines</h2>

<p>A Scenario Outline provides a parametrized scenario script. However, it easily become an anti-pattern if you use it too many.</p>

<p>Each scenario with example actually means a different scenario. It&rsquo;s better to <strong>use scenario with a meaningful name</strong> instead of using scenario example.</p>

<p>Scenario outlines uses step params, which should avoid to use.</p>

<p>Beware of feature that only has one scenario but have a long list of examples. It could be a smell that too many different scenario are put together.</p>

<h2>Avoid to use data tables</h2>

<p>Data tables provides data for implementation. It is against the rule of feature should be declarative and business focus.</p>

<p>Feature should not provide any detail implementation or data for testing.</p>

<h2>Use Capybara <code>find</code> whenever possible</h2>

<p><code>find</code> will wait for a set amount of time and continuously retry finding the element until either the element is found or the time expires.</p>

<p><strong>Bad</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">first</span><span class="p">(</span><span class="s2">&quot;.active&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Good</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">find</span><span class="p">(</span><span class="s2">&quot;.active&quot;</span><span class="p">,</span> <span class="ss">match</span><span class="p">:</span> <span class="ss">:first</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Atom Editor in Ubuntu]]></title>
    <link href="http://blog.wenbing.dev/blog/2014/05/13/using-atom-editor-in-ubuntu/"/>
    <updated>2014-05-13T16:01:26-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2014/05/13/using-atom-editor-in-ubuntu</id>
    <content type="html"><![CDATA[<p><a href="atom.io">Atom</a> is a new editor from github.com, which is very similar to Sublime. It&rsquo;s written using nodejs, coffeescript and less. And it&rsquo;s <strong>opensource</strong>. It makes lots of potentials for the future of the editor.</p>

<p>However, atom does not provide a Linux package yet. As it&rsquo;s opensource, we can build from source.</p>

<h2>Build Atom Editor for Ubuntu 14.04</h2>

<p>From <a href="https://github.com/atom/atom">atom github repo</a> you can find the <a href="https://github.com/atom/atom/blob/master/docs/build-instructions/linux.md">Linux installation guide</a>. Basically just following this guide should be OK.</p>

<p>The only problem I met is <strong>node-gyp rebuild</strong> issue. It&rsquo;s because of the <strong>gyp</strong> installed in your machine which is conflicting with gyp version in node-gyp.</p>

<p>Simple solution is :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get remove gyp
</span></code></pre></td></tr></table></div></figure>


<p>After that, you will find a .deb atom file under <em>/tmp/atom-build</em> folder. Then install it :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /tmp/atom-build
</span><span class='line'>sudo dpkg -i atom-0.95.0-amd64.deb
</span></code></pre></td></tr></table></div></figure>


<p>Now you can open it by command <code>atom</code>.</p>

<h2>Configure keybindings for Ubuntu</h2>

<p>Most of the keybindings in atom are for Mac OS. You can add your own keys in key map file <code>~/.atom/keymap.cson</code>. There are some basic hotkeys I have added for Ubuntu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s1">&#39;.editor&#39;</span>:
</span><span class='line'>    <span class="s1">&#39;ctrl-l&#39;</span>: <span class="s1">&#39;editor:select-line&#39;</span>
</span><span class='line'>    <span class="s1">&#39;ctrl-d&#39;</span>: <span class="s1">&#39;find-and-replace:select-next&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;body&#39;</span>:
</span><span class='line'>  <span class="s1">&#39;ctrl-pagedown&#39;</span>: <span class="s1">&#39;pane:show-next-item&#39;</span>
</span><span class='line'>  <span class="s1">&#39;ctrl-pageup&#39;</span>: <span class="s1">&#39;pane:show-previous-item&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the source code e.g. <a href="https://github.com/atom/atom/blob/master/src/editor-view.coffee">edit-view.coffee</a> for available commands you can use.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only Allow GET for Specified Request Path Using Mod Security]]></title>
    <link href="http://blog.wenbing.dev/blog/2014/03/24/only-allow-get-for-specified-request-path-using-mod-security/"/>
    <updated>2014-03-24T21:47:06-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2014/03/24/only-allow-get-for-specified-request-path-using-mod-security</id>
    <content type="html"><![CDATA[<h2>Mod Security</h2>

<p>Recently we want to directly use couchdb REST API. But only expose GET REST API so the data could be safe for the public.</p>

<p>A simple mod security rule do this trick:</p>

<pre><code>SecRule REQUEST_URI "/database" "chain,log,deny,status:403,phase:2,id:1234567010"
SecRule REQUEST_METHOD "!@rx ^(?:GET)$" 
</code></pre>

<h2>Two layers application - AngularJS + CouchDB</h2>

<p>Speaking to this mod security, we are actually working some simple two layers application, only front-end(AngularJS) and datastore(Couchdb).</p>

<p>This simple stack suits for some applications, which only load data from backend.And backend data would be updated by application operator.Those applications could be FAQ or News website etc. We use CouchDB because it has very good REST API and Web UI to manage the data.</p>

<p>So no application layer, :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Blogging]]></title>
    <link href="http://blog.wenbing.dev/blog/2014/03/16/start-blogging/"/>
    <updated>2014-03-16T22:23:36-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2014/03/16/start-blogging</id>
    <content type="html"><![CDATA[<h2>Blogging, NOW!</h2>

<p>以前有一个blog，但是各种原因最后连之前的文章都找不回来了。这也是一个很好的教训，能不自己hosting就不要自己hosting，数据备份还是不如source code管理容易，于是我就选择了当然颇为流行的github+octopress.</p>

<p>到新西兰快两年的时间，做个各种各样的事情，其实还是不错的，接触面还是挺广的。基本上每天都在解决各种各样的问题，每每解决了问题，心里都有一种强烈的冲动把它blog下来，谈不上说分享，更多想记录一下自己做的事情，希望能两年后知道自己之前做了什么事情。一直觉得家里忙（本人是两个孩子的爸了哦，:)),但这一切都不是借口，要做就现在做吧。</p>

<p>于是买了域名(wbinglee.com)，就开干了。至于为什么要用这个域名，只是它和我太有缘了吧。我的gmail的帐号就是这个，很多网站的帐号也是这个，那域名也就这个吧，看起来无比的熟悉。</p>

<p>新的blog中关于技术问题，我会尽量使用英文（虽然不咋地&hellip;）;其他杂七杂八的就中文吧，英文肯定写不出感觉。</p>

<p>好，开始了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[功能的设计是一种方法的创新]]></title>
    <link href="http://blog.wenbing.dev/blog/2011/05/16/design-is-new-innovation/"/>
    <updated>2011-05-16T08:00:00-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2011/05/16/design-is-new-innovation</id>
    <content type="html"><![CDATA[<p>有一个大家都知道的故事，家里两个孩子分苹果，开始总是吵架分不匀，后来妈妈想到一个办法，谁分苹果谁就最后选苹果，果然孩子再也不为分不均而吵架了。</p>

<p>最近也遇到一些事情，颇有感触。我们在运营一个面向公司内部基础设施平台，类似AmazonEC2.在提供什么样的master image的问题上面用户有了严重不一致，比如说redhat，有的组要最小安装，有的组要标准安装，有的组说最好的完全安装，有的组说我不管你怎么安装，你只要满足我这这这要求就行…打了一个星期的架也没有办法统一‥.仔细想后，这样的事情不是平台应该去提供的，应该用户自己去做，我们去提供方法和工具，这样就没人抱怨，我们也不会被累死。</p>

<p>另外一件事情，当前整个cloud的资源是有限的，所以如何分这个蛋糕就成了各个组争吵的焦点，我只有150个，为什么他有200个…看看EC2在这个问题就有创新的办法，好，你想要多少就给你多少，但是对不起，用什么都得交钱，机器按性能和时间收钱，网络流量收钱，disk io也收钱…如果我们使用这样的资源分配模式，只怕是各个组就不会开始拼的头破血流后期又大量浪费，而是都把智慧放到如何提供使用率而不是内斗。</p>

<p>可以看出，软件不同的功能设计会带来何等不同的结果，有点只怕的给别人填麻烦。用软件来提供生产效率，归根结底还是看是否对于一些问题有合理的解决办法，或者说是一种创新的办法来解决已有的问题。</p>

<p>现在很多新型的互联网公司，也是因为互联网的出现给社会中的各种问题有了一种新的解法。比如，微博能火就是用一种创新的方式来解决人之间的沟通问题信息的传播问题，而这只是一点。生活中有太多的问题需要我们找到一种创新的办法去解决。软件/服务很多时候它不是一种技术的创新，而是对解决问题的方法上的创新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如果我是architect]]></title>
    <link href="http://blog.wenbing.dev/blog/2011/01/22/if-i-am-architect/"/>
    <updated>2011-01-22T07:00:00-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2011/01/22/if-i-am-architect</id>
    <content type="html"><![CDATA[<p>我会做到如下事情：</p>

<ul>
<li>爱我的项目。除了老婆，脑子里面就在想如何让这个项目成功。
控制需求。无论是什么STSM， DE提出来的想法，都要严格控制。不能为了讨好而加入到已有版本中，可以放到backlog中由release manager去安排优先级。</li>
<li>工程师素质。永远不要说“这个很简单，现在就加”。 工程师做的东西是已经被验证能行的通才去做的, 简单来说什么都很简单，不是攻克艾滋病和解决哥德巴赫猜想。能work不是工程项目关注点，应该想到项目的各种需求，各种潜在问题，时间资源安排，技术前景，工程质量等等。要关注工程项目中的每个环节，建立整个team的开发过程建立合理的流程，制定相应的rules去让项目快速健康发展，帮组组员梳理重要的技术环节。</li>
<li>永远在解决最棘手的问题。棘手不是最urgent的事情，而是对于项目最重要的问题。例如如何考虑security，如何扩展，以后如何发展等等。</li>
<li>了解细节。对于每个部分，能做到心中有数。能够帮组team控制代码质量，时常review。每个新功能投入时，一定要review清楚，不要让team实现出来的东西surprise你，而team认为自己没有做错。</li>
<li>及时以及强势处理外围事务。例如老板们的要求，各种人的不同需求等等。永远站在项目成功的角度上面对待外来的各种信息，不要因为别人的位高权重而妥协。</li>
<li>沟通。频繁和team各个角色人员进行聊天，了解他们的具体事情，他们遇到的问题，他们的考虑，他们的痛苦和满意的地方。这样往往能帮助你认识到当前的问题，及时做出调整。</li>
<li>良好的工作习惯。规律，让team觉得可以依靠。</li>
</ul>


<p>暂时想到这些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud 就在身边]]></title>
    <link href="http://blog.wenbing.dev/blog/2010/11/27/cloud-around-you/"/>
    <updated>2010-11-27T07:00:00-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2010/11/27/cloud-around-you</id>
    <content type="html"><![CDATA[<p>今天老爸告诉我他要买一个软件，是网络版的，只要3000一年。仔细看了看，是很典型的SaaS应用。难怪可以把价格做到这么低。而且也发展过很长一段时间了。</p>

<p>小公司都要从Excel向SaaS的时代迁移了，商机无限啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新浪围脖]]></title>
    <link href="http://blog.wenbing.dev/blog/2010/11/13/sina-weibo/"/>
    <updated>2010-11-13T07:00:00-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2010/11/13/sina-weibo</id>
    <content type="html"><![CDATA[<p>使用了一会新浪围脖，发现比较有趣的事情。新浪围脖是可以和社区绑定的，正准备抱怨为什么不可以和delicious，buzz，foursquare等绑定时，发现边上有这样的提示：由于系统调整，绑定开心网的服务不可用，给您带来的不便敬请谅解。搜索新闻发现新浪和开心原来确有合作。<a href="http://tech.sina.com.cn/i/2010-04-13/21334052349.shtml">http://tech.sina.com.cn/i/2010-04-13/21334052349.shtml</a></p>

<p>看来除了3q之争，google/facebook之外，所谓的开放的互联网到处都是自我的封闭保护。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebSphere Application Server Feature Pack for Dynamic Scripting]]></title>
    <link href="http://blog.wenbing.dev/blog/2010/05/01/websphere-app-server-for-dynamic-scripting/"/>
    <updated>2010-05-01T08:00:00-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2010/05/01/websphere-app-server-for-dynamic-scripting</id>
    <content type="html"><![CDATA[<p>The WAS feature pack (sMash Enterprise Packager) is LIVE！see IBM.com <a href="http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?infotype=an&amp;subtype=ca&amp;supplier=897&amp;appname=IBMLinkRedirect&amp;letternum=ENUS210-144">announcement letter</a>， WebSphere Application Server Feature Pack for Dynamic Scripting.</p>

<p>终于将这baby从无到有，一步一步终于走了出来。很高兴能看到它成为zero现在的主要组成部分，想想自己也不是在做打杂的事情，在这半年迷茫的时间中有了些许的安慰。也最后要和sMash say goodbye了。希望sMash走好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“我从来不用if-else…”]]></title>
    <link href="http://blog.wenbing.dev/blog/2010/05/01/i-never-use-if-else/"/>
    <updated>2010-05-01T08:00:00-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2010/05/01/i-never-use-if-else</id>
    <content type="html"><![CDATA[<p>前几天，同事面试完回来哈哈大笑说，面试的人折腾了半天一个简单的程序没有搞定，还很牛逼哄哄地说我写程序从来不用if-else…连Mark同学听到也开心地笑了，呵呵</p>

<p>这几天路上无聊琢磨到底不用if-else怎么写程序，倒是想了几个办法。(使用JavaScript)</p>

<p>方法一：用while代替.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function noifelsewhile(condition){
</span><span class='line'>    while(condition){
</span><span class='line'>  alert("I'm Jack");
</span><span class='line'>  break;
</span><span class='line'>    }
</span><span class='line'>    while(!condition){
</span><span class='line'>  alert("I'm Rose");
</span><span class='line'>  break;
</span><span class='line'>   }
</span><span class='line'>}
</span><span class='line'>noifelsewhile(true);
</span><span class='line'>noifelsewhile(false);</span></code></pre></td></tr></table></div></figure>


<p>方法二：用for代替.
和while一个套路</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function noifelsefor(condition){
</span><span class='line'>   for(;condition;){
</span><span class='line'>  alert("I'm Jack")
</span><span class='line'>  break;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   for(;!condition;){
</span><span class='line'>  alert("I'm Rose");
</span><span class='line'>  break;
</span><span class='line'>   }
</span><span class='line'>}
</span><span class='line'>noifelsefor(true);
</span><span class='line'>noifelsefor(false);</span></code></pre></td></tr></table></div></figure>


<p>办法三:三元表达式
因为三元表达式只能使用表达式，所以需要使用一个function用来支持多行statements</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function noifelseternary(condition){
</span><span class='line'>    condition?function(){
</span><span class='line'>          alert("I'm Jack");
</span><span class='line'>      }():
</span><span class='line'>      function(){
</span><span class='line'>          alert("I'm Rose");
</span><span class='line'>      }();
</span><span class='line'>}
</span><span class='line'>noifelseternary(true);
</span><span class='line'>noifelseternary(false);</span></code></pre></td></tr></table></div></figure>


<p>办法四:逻辑与或-Default
在JavaScript中&amp;&amp;是logical and, 也可以称谓guard。如果第一个参数是false，那么返回第一个值，否则返回第二个值。而并不一定返回true或false；</p>

<p>var value = p &amp;&amp; p.name; /<em> The name value will only be retrieved from p if p has a value, avoiding an error. </em>/
||是logical or，也可以成为default。如果第一个参数是false，那么返回第二个值，反则返回第一个只。同样并不是一定返回true或者false。</p>

<p>value = v || 10; /<em> Use the value of v, but if v doesn&rsquo;t have a value, use 10 instead. </em>/
更多这个信息可以查看A Survey of the JavaScript Programming Language。
好，现在就运用这个两个操作来模拟if-else</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function noifelsedefault(condition){
</span><span class='line'> (condition ||
</span><span class='line'>  function(){
</span><span class='line'>      alert("I'm Rose");
</span><span class='line'>  }())&&
</span><span class='line'>  function(){
</span><span class='line'>      alert("I'm Jack");
</span><span class='line'>  }();
</span><span class='line'>}
</span><span class='line'>noifelsedefault(true);
</span><span class='line'>noifelsedefault(false);</span></code></pre></td></tr></table></div></figure>


<p>办法五:逻辑与或-Guard
这一次把&amp;&amp;放到前面。这种逻辑与或在其他语言也有，比如python中的and，or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function noifelseguard(condition){
</span><span class='line'>  (condition &&
</span><span class='line'>  function(){
</span><span class='line'>      alert("I'm Jack");
</span><span class='line'>      return true; //注意一定要有return true，要保证这个函数返回true。
</span><span class='line'>                //其实办法4中需要保证第一个函数返回false，因为没有返回值就是null，所以就可以不用显式加return false了。
</span><span class='line'>  }())||
</span><span class='line'>  function(){
</span><span class='line'>      alert("I'm Rose");
</span><span class='line'>  }();
</span><span class='line'>}
</span><span class='line'>noifelseguard(true);
</span><span class='line'>noifelseguard(false);</span></code></pre></td></tr></table></div></figure>


<p>还有其他的办法吗？大家来变态~，:)
五一快乐~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[站点终于恢复了]]></title>
    <link href="http://blog.wenbing.dev/blog/2010/01/30/zhan-dian-zhong-yu-hui-fu-le/"/>
    <updated>2010-01-30T23:00:00-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2010/01/30/zhan-dian-zhong-yu-hui-fu-le</id>
    <content type="html"><![CDATA[<p>非常感谢redphp.net,这家host不错。虽然源于国内无耻的严打，经过一点折腾，终于回到正常。我一个小小blog就这么麻烦，真不知道国内那些网站怎么过来的。</p>

<p>希望国内互联网环境能恢复理性健康。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用jconsole来管理WebSphere AppServer的MBean]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/11/29/using-jconsole-in-websphere-application-server/"/>
    <updated>2009-11-29T01:40:19-08:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/11/29/using-jconsole-in-websphere-application-server</id>
    <content type="html"><![CDATA[<p>最近需要在WebSphere中做点魔术，所以要使用WAS(WebSphere Application Server)中的管理能力。JMX是WAS的管理的核心，苦于<a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.javadoc.doc/public_html/mbeandocs/index.html">WAS Mbean文档</a>并不是那么详细，这个时候就可以使用jconsole了。jconsole是一个JDK自带的JMX兼容的JVM管理工具，可以用它来可视化的查看和操作Mbean。</p>

<p>在启动jconsole时需要一些WAS的jar，所以我这样来做：</p>

<ul>
<li>创建一个文件夹，例如：C:\programs\jconsole</li>
<li>将一些需要的jar 拷贝进入到这个文件夹的libs中：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>com.ibm.ws.admin.client_6.1.0.jar   （在&lt;WAS_HOME&gt;/runtimes)   
</span><span class='line'>ibmorbapi.jar  (在&lt;WAS_HOME&gt;/java/jre/lib)
</span><span class='line'>ibmorb.jar (在&lt;WAS_HOME&gt;/java/jre/lib)
</span><span class='line'>ibmcfw.jar (在&lt;WAS_HOME&gt;/java/jre/lib)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编写一个bat文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="k">set</span> <span class="nv">JAVA_HOME</span><span class="o">=</span><span class="s2">&quot;C:\Program Files\Java\jdk1.6.0_16&quot;</span>
</span><span class='line'><span class="k">set</span> <span class="nv">WAS6</span>.<span class="m">1</span>_JARS<span class="o">=</span>C:\programs\jconsole\libs
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">BOOTJARS</span><span class="o">=</span><span class="nv">%WAS6</span>.<span class="m">1</span>_JARS%\ibmorbapi.jar
</span><span class='line'><span class="k">set</span> <span class="nv">BOOTJARS</span><span class="o">=</span><span class="nv">%BOOTJARS%</span>;<span class="nv">%WAS6</span>.<span class="m">1</span>_JARS%\ibmorb.jar
</span><span class='line'><span class="k">set</span> <span class="nv">BOOTJARS</span><span class="o">=</span><span class="nv">%BOOTJARS%</span>;<span class="nv">%WAS6</span>.<span class="m">1</span>_JARS%\ibmcfw.jar
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">%WAS6</span>.<span class="m">1</span>_JARS%\com.ibm.ws.admin.client_<span class="m">6</span>.<span class="m">1</span>.<span class="m">0</span>.jar
</span><span class='line'><span class="k">set</span> <span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">%CLASSPATH%</span>;<span class="nv">%JAVA_HOME%</span>\lib\tools.jar
</span><span class='line'><span class="k">set</span> <span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">%CLASSPATH%</span>;<span class="nv">%JAVA_HOME%</span>\lib\jconsole.jar
</span><span class='line'>
</span><span class='line'><span class="nv">%JAVA_HOME%</span>\bin\jconsole  -J-Xbootclasspath<span class="n">/p:%BOOTJARS%</span> -J-Djava.class.path<span class="o">=</span><span class="nv">%CLASSPATH%</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用如下URL来远程连接WAS中的JMX server</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>service:jmx<span class="nl">:iiop</span>:<span class="n">//localhost:2809/jndi/JMXConnector</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中这个端口号是RMI Connector的端口号，可以在启动的logs发现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>ADMC<span class="m">0026</span>I:The RMI Connector is available at port  <span class="m">2809</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>或者到admin console中查看
Application servers > server1 >   Administration Services > JMX   connectors</p>

<p>好，这样就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一直在写]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/09/14/keep-writing/"/>
    <updated>2009-09-14T08:25:15-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/09/14/keep-writing</id>
    <content type="html"><![CDATA[<p>刚和同学聊天时，问我blog怎么好长时间都没有更新了。看了看上篇文章的日期，离现在也有两个月有余了，有些惭愧。最近在做一些有意思的技术调研，倒是会在接下来的文章中分享一些。其实这段日子也在写一些东西，不过不在自己的blog上面了罢了。</p>

<ul>
<li><p>带给PHP 和 Java 世界的双赢  (<a href="http://www.netvibes.com/shawnzhu">朱可</a>&amp;me) -《 程序员》杂志 2009年09月刊</p></li>
<li><p>Ajax - 超越桌面的Web 用户体验 - 《<a href="http://www.webspherechina.net">WebSphere 中国</a>》纸质杂志第二期</p></li>
<li><p><a href="http://www.ibm.com/developerworks/cn/websphere/library/techarticles/0909_smash_dojo_Ajaxdev/index.html">在WebSphere sMash中使用Dojo开发Ajax的Web应用程序</a> - developerWorks</p></li>
</ul>


<p>时间总是匆匆，让我们继续前行&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《PPK on JavaScript》]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/07/07/read-ppk-on-javascript/"/>
    <updated>2009-07-07T16:53:46-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/07/07/read-ppk-on-javascript</id>
    <content type="html"><![CDATA[<p> <a href="http://www.quirksmode.org/">PPK</a>也是在JavaScript世界中的风云人物了，这位老兄对于浏览器端的技术以及各种浏览器的兼容性有极其丰富的经验。在这本书中，他谈了很多关于可访问性(Accessibility)和可用性(Usability)的一些问题，非常有趣。比如他说“不同的开发者以不同的方式诠释了JavaScript的目的。简单而形象地说就是：深受CSS革命影响的传统Web开发者们，创建的是瘦的、可访问性很强、乱糟糟的JavaScript代码；而来至服务器端开发的‘资深程序员们’用完美的面向对象代码、创建的是胖的、可访问性很差的Ajax客户端”。显然，ppk同学应该属于写乱糟糟但可访问性很好的人，而现在我做的大量事情却是后者。他更多相信现在的Ajax只是一种泡沫，当这个泡沫破灭并且大量‘资深服务器程序员’消失时，JS的开发者会更加注重可访问性。  可能体会不到ppk经历浏览器各种痛苦的经历，但是总体来说浏览器都在坚定地遵循Web标准，JavaScript的支持也会成为浏览器必备要求。anyway，事情总在发展，好戏在后头。分享一下我觉得这本书中几个有趣的地方。</p>

<h3>可访问性和可用性</h3>

<p>可访问性(<a href="http://en.wikipedia.org/wiki/Accessibility">Accessibility</a>)是指你的网页对于任何人、在任何环境下都是可持续访问的。特别是指某些用户，比如弱视、浏览器不支持JavaScript或者另外一些情况，比如用户使用Mobile使用你的网页等等。而可用性(Usability)是指使用或者浏览你的网页的容易程度(这里我们只谈web页面),通常它指我们能更有效率地使用、更容易地学习以及更加满意地使用它。举个例子来说，你让你的web页面支持IE6，或者支持mobile都是在提高它的可访问性；而是用CSS来改善布局让用户更容易阅读、使用JavaScript做一些对用户有帮助的互动都是在提高它的可用性。</p>

<p>Web页面都是由下面三个层组成的，通过它们我们可以了解到它们之间的关系以及它们和可访问性和可用性之间的关系。</p>

<ul>
<li><p>HTML结构层</p></li>
<li><p>CSS表现层</p></li>
<li><p>JavaScript行为层</p></li>
</ul>


<p><img src="http://liwenbing.cn/wp-content/uploads/2009/07/web3layers-300x245.PNG" alt="web3layers" /></p>

<p>Web页面的三个层，HTML结构层是必需的基础，CSS表现层和JavaScript行为层建于它之上。所以在客户端代码中不得不关注的话题就是这三个层的关注点分离。具体探讨一下这三个的分离：</p>

<p><strong>表现与结构的分离(CSS与HTML)</strong></p>

<p>这个分离很好理解，基本思想就是确保HTML来定义结构，而所有的表现都定义在另外单独的CSS文件中。HTML不应该出现<code>&lt;font&gt;</code>标签和用于表现的表格。如果想定义字体和布局，都应该在CSS中处理。</p>

<p>大部分情况下面我们知道达到某个效果是修改表现或者结构是清楚的。但是有些情况下当更改HTML和修改CSS都可以时，你需要慎重地思考到底哪种是合理的。比如一个节点，你希望它不显示，那么你可以在HTML上面删除该节点或者使用CSS来“display:none”。当这种情况是，需要自己分析所需要的效果属于哪种情况，然后修改合理的层。</p>

<p><strong>行为与结构的分离(JavaScript与HTML)</strong></p>

<p>这个也比较好理解，就是不要把任何的JavaScript代码写到你的HTML页面中。应该把所有JavaScript代码放到一个独立的js文件中，然后将它链入到所有需要它的HTML页面中。</p>

<p>关于这个有一个有趣的话题就是：<strong>无侵入脚本编程(unobtrusive scripting).</strong>简单来说它就是通过HTML和JavaScript的分离以达到页面的可访问性和可用性的最大化。既JavaScript失效了，页面还是可阅读和理解的；而通过引入脚本和JavaScript的hook，就可以让脚本运行，增强可用性。</p>

<p><strong>行为与表现的分离(JavaScript与CSS)</strong></p>

<p>这个的分离是非常复杂的，而且并没有总结出什么特别系统的规则。CSS和JavaScript是有重合的灰色地带的，有时候完全不能确切地把某个效果归为表现还是行为。比如是使用CSS中的hover还是JavaScript的mouseover/mouseout。基本来说你自己得根据具体情况做合理的选择吧。</p>

<h3>事件捕捉模型</h3>

<p>在HTML的事件模型中有一个有趣的话题。这个简单的问题就是：如果一个节点和它的父亲节点都有对同一个事件的处理，那么到底哪个事件会被先执行呢？这就是关于事件的冒泡和捕获。事件冒泡是说事件从它的目标元素开始，沿着文档树依次向上冒泡，并触发相应的事件处理函数。而事件的捕捉是刚好相反的，它从文档的第一级开始，然后沿着文档树向下游，知道事件目标为止。</p>

<p>在W3C模型中，捕获和冒泡都会发生。当一个事件触发时，它先被文档捕获，到了事件目标后，再冒泡到文档顶层。而传统模型和微软模型只支持事件冒泡，而不支持事件捕获。所以最好是限制使用事件冒泡。其实在我们的实际编程中，很少关心这个话题，是因为大部分情况我们都只使用了事件冒泡。</p>

<p>更加具体的可以查看ppk的文章：<a href="http://www.quirksmode.org/js/events_order.html">http://www.quirksmode.org/js/events_order.html</a></p>

<h3>小记</h3>

<p>应该来说PPK所谈的JavaScript是一个更加全面的浏览器编程的世界，让人可以全面来了解这个世界包含的东西。其实大部分的内容在PPK的网站上都有，值得读读。<a href="http://www.quirksmode.org/js/contents.html">http://www.quirksmode.org/js/contents.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蓝色的血液]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/06/17/blue-blood/"/>
    <updated>2009-06-17T09:51:16-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/06/17/blue-blood</id>
    <content type="html"><![CDATA[<p>我是一名pure blue，从在IBM实习到开始工作到现在，在这样的一家百年老店工作，虽然有太多让人抱怨的地方，但是你会喜欢这里的人（虽然不是全部），并且从心里慢慢接受它的文化和价值观。这样的一个公司的价值观是令人敬佩的，足以指导你做人做事。特别不喜欢一些人张口闭口说这不如人那不爽，只怕自己没有自信罢了。不足就努力去改变它，你真受不了了就quit，what&rsquo;s the big deal？一个人在外人面前骂娘（自己老娘）的时候，是不可能得到尊重的，只是哗众取宠罢了。当你流淌着蓝色的血液时，你是自豪的。</p>

<p>今早一聊天之不爽，故有此文。下面摘除一些从《品味蓝色》上句子。我很喜欢。</p>

<blockquote><p>任何一名优秀的IBM人，当你问他成功之道的时候，他也许无法教会你具体的流程和方法，但他一定会告诉你，没有什么，不过是秉承诚信负责之道好好做人、好好做事罢了，因为在IBM，机会永远青睐于那些有好的工作表现和正直诚实的人。 &ndash; 周伟焜</p>

<p>学会尊重别人，同时赢得别人尊重，这很重要。尊重别人身上的优点，你会变得更宽容。执着、专业、深入是赢得他人尊重的根本。谁都有缺点，包括我们的公司。但是要学会用宽容的心来对待周围的一切。得到尊重，你每天都会快乐。 &ndash; 郭希文</p>

<p>所谓分享成功其实就是看你怎样Increase your influence，这并不是仅指依靠手中的权力发号施令，而是指能够提供给别人有价值的意见或见地。同时，在团队合作中，“诚信（integrity）”则是最重要的原则。无论对公司，还是对在公司团队中工作的个体，诚信都是立足之本，信任之基。对一个科学家来说，诚信就更重要，科学是不容半点虚假成分的，谁想投机取巧，违背科学规律，只能是搬起石头砸自己的脚。&ndash; 叶天正</p>

<p>认真积极地工作，让我在事业上可以不断进步；以尊重、信任的态度与家人、同事沟通，让我得到了家人的支持，同事的尊敬，从而拥有了和谐美满的家庭和成功的事业。面对这一切，我最深的感受就是四个字——“知福惜福”。 &ndash;于雪莉</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sMash Stakeholder Meeting]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/06/17/smash-stakeholder-meeting/"/>
    <updated>2009-06-17T08:41:37-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/06/17/smash-stakeholder-meeting</id>
    <content type="html"><![CDATA[<p>上周进行了sMash的stakeholder meeting，在这个会上我介绍了Flow的新的特性，并且进行Demo的演示。我们的演示大概从5分钟开始，之前是产品开发经理的一些介绍。本人英文口语比较烂，不知道他们到底听懂了没有。详细的信息可以看<a href="http://www.projectzero.org/blog/index.php/2009/06/15/june-stakeholder-meeting-replay/">projectzero 的blog</a>。Vido在Viddler上，至于为什么在viddler上，我想可能是为了照顾中国用户无法访问YouTube的原因吧，呵呵。</p>

<p><a href="http://www.viddler.com/explore/projectzero/videos/4/">http://www.viddler.com/explore/projectzero/videos/4/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dojo Widget的析构过程]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/06/05/dojo-widget-destructor/"/>
    <updated>2009-06-05T04:09:13-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/06/05/dojo-widget-destructor</id>
    <content type="html"><![CDATA[<p>了解dojo widget（或者说dijit）的析构过程，不仅让你更加了解整个dijit的生命周期，同样也能帮助我们在自己定制化的dijit中如何正确地释放资源。（这里讨论的dojo应该是在0.9或者以上版本的)</p>

<p>下面是dijit的析构过程：</p>

<pre><code>                        destroyRecursive
                    /                      \
                destroy                   destroyDescendants
        /        |        \
uninitialize  disconnect() destroyRendering
</code></pre>

<p>一些常见的<strong>错误</strong>是如下：</p>

<ul>
<li><p>使用destroy()去销毁一个dijit。我们应该使用destroyRecursive()去销毁一个dijit，从上面的过程可以看出，destroyRecursive()会销毁其孩子widgets。</p></li>
<li><p>使用destory()去销毁定制dijit中的资源。更可怕的是有的代码可能是直接覆盖destroy，而根本不调用_Widget中的destory。uninitialize()才是dijit暴露出来给定制化widget进行析构的stub function。</p></li>
</ul>


<h3>结论</h3>

<p><strong>使用destroyRecursive()去销毁dijit，使用uninitialize()在定制化的dijit来释放自己的资源</strong>。destroyDescendants，destroyRendering基本上用不到，也不要去覆盖它们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么Firefox 3不能加载本地的JavaScript文件了？]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/06/05/why-ff3-cannot-load-local-javascript-file/"/>
    <updated>2009-06-05T01:36:38-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/06/05/why-ff3-cannot-load-local-javascript-file</id>
    <content type="html"><![CDATA[<p>一段时间来一直受这样的困扰，就是我的Firefox无法运行本地的dojo的测试文件。一直以为是我的firefox或者机器出了什么问题，就只好去使用IE或者Chrome去运行这些测试例子，可惜不能用firebug的确让人很不爽。</p>

<p>今天在firebug查看了一些错误情况，报错居然是“Access to restricted URI denied”。这个明显是跨域访问的错误，但是本地文件怎么报这样的错呢？在Firefox的about:config搜索了一下policy,居然找到了原因所在，原来Firefox对于本地文件也进行了同源访问的安全设置,配置参数是：security.fileuri.strict_origin_policy。这个新的设置只是在firefox 3才被加入，并且默认是开启的。不过你也可以将这个关掉，这样就可以如同以前那样运行本地的dojo测试用例，或者其它你想本地加载的JavaScript文件。</p>

<p><a href="http://liwenbing.cn/2009/06/05/why-ff3-cannot-load-local-javascript-file/local-file-p-origin-policy/"><img src="http://liwenbing.cn/wp-content/uploads/2009/06/local-file-p-origin-policy-300x42.png" alt="local-file-p-origin-policy" /></a></p>

<p>继续在google了一下，找了这个"feature"的由来，<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=230606">https://bugzilla.mozilla.org/show_bug.cgi?id=230606</a>，大概是说本地的文件如果没有这样的限制，可以访问本机的其他文件，这样会造成安全隐患。John Resig（Father of  jQuery) 也有一个blog关于这个问题，<a href="http://ejohn.org/blog/tightened-local-file-security/">http://ejohn.org/blog/tightened-local-file-security/</a>，下面的评论也挺值得看看的。</p>

<p><strong>More Links: </strong></p>

<ul>
<li><p><a href="http://www.dojotoolkit.org/support/faq/why-does-dojo-fail-load-file-urls-firefox-3">http://www.dojotoolkit.org/support/faq/why-does-dojo-fail-load-file-urls-firefox-3</a></p></li>
<li><p><a href="http://kb.mozillazine.org/Security.fileuri.origin_policy">http://kb.mozillazine.org/Security.fileuri.origin_policy</a></p></li>
<li><p><a href="http://kb.mozillazine.org/Security.fileuri.strict_origin_policy">http://kb.mozillazine.org/Security.fileuri.strict_origin_policy</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中==等同运算符的类型转换]]></title>
    <link href="http://blog.wenbing.dev/blog/2009/05/21/javascript-equal-type-conversion/"/>
    <updated>2009-05-21T21:59:18-07:00</updated>
    <id>http://blog.wenbing.dev/blog/2009/05/21/javascript-equal-type-conversion</id>
    <content type="html"><![CDATA[<p>这周在给一些新员工讲JavaScript的时候，谈了==和===的区别，本质来说，===是严格的等同运算符，要求两者类型相同并且值相同；而==运算符在做比较时，会做一定的类型转换。我们在使用过程中应该使用===而不是==，因为这种类型转换后的比较往往都不是你想要的。当时列出了corckfork最喜欢一些例子：</p>

<pre><code>    '' == '0'          // false
    0 == ''            // true
    0 == '0'           // true
    false == 'false'   // false
    false == '0'       // true
    false == undefined // false
    false == null      // false
    null == undefined  // true
    ' \t\r\n ' == 0    // true
</code></pre>

<h3>转换规则</h3>

<p>当时有人就问了，那么在做类型转换的时候倒是等式的左边向右边转，还是反过来呢？其实这些都是不对的，我们去看看ECMAScript的规范，会发现它有对于等同运算符做类型转换很明确的比较算法，下面我将其翻译如下:
<strong>对于比较x==y，</strong></p>

<p>1.如果x和y类型不同，那么到14步；
//
//2-13步，为类型相同的比较
//
14.如果x是null，y是undefined，返回true；
15.如果x是undefined，y是null，返回true；
16.如果x是Number，y是String，将y转化成Number，然后再比较；
17.如果x是String，y是Number，将x转化成Number，然后再比较；
18.如果x是Boolean，那么将x转化成Number，然后再比较；
19.如果y是Boolean，那么将y转化成Number，然后再比较；
20。如果x是String或者Number，y是Object，那么将y转化成基本类型，再进行比较；
21.如果x是Object，y是String或者Number，将x转化成基本类型，再进行比较；
22.其他情况均返回false；</p>

<p>ECMA这帮人写的算法过程比较啰嗦，简单一句话来概括就是，对于基本类型Boolean，Number，String，三者之间做比较时，总是向Number进行类型转换，然后再比较；如果有Object，那么将Object转化成这三者，再进行比较；对于null和undefined，只有x，y分别是它们时才相同，其他都为false。</p>

<p>另外，对于转化到Number的算法，细节可以来看ECMAScript的规范，但是基本上下面这个<a href="http://www.jibbering.com/faq/faq_notes/type_convert.html#tcNumber">几个表</a>可以覆盖大部分的内容:</p>

<p>type-convert to number (+col) : String Values.</p>

<p>&ldquo;&rdquo;
(empty
string)
&ldquo;-1.6&rdquo;
&ldquo;0&rdquo;
&ldquo;1&rdquo;
&ldquo;1.6&rdquo;
&ldquo;8&rdquo;
&ldquo;16&rdquo;
&ldquo;16.8&rdquo;</p>

<p>+col</p>

<p>0</p>

<p>-1.6</p>

<p>0</p>

<p>1</p>

<p>1.6</p>

<p>8</p>

<p>16</p>

<p>16.8</p>

<p>type-convert to number (+col) : String Values.</p>

<p>&ldquo;123e-2&rdquo;
&ldquo;010&rdquo;
(Octal)
&ldquo;0x10&rdquo;
(Hex)
&ldquo;0xFF&rdquo;
(Hex)
&ldquo;-010&rdquo;
&ldquo;-0x10&rdquo;
&ldquo;xx&rdquo;</p>

<p>+col</p>

<p>1.23</p>

<p>10</p>

<p>16</p>

<p>255</p>

<p>-10</p>

<p>NaN</p>

<p>NaN</p>

<p>type-convert to number (+col) : Other Values.</p>

<p>undefined
null
true
false
new Object()
function(){
return;
}</p>

<p>+col</p>

<p>NaN</p>

<p>0</p>

<p>1</p>

<p>0</p>

<p>NaN</p>

<p>NaN</p>

<p>再回头来看看corkford给出的例子，然后使用上面的规则去判断；</p>

<pre><code> '' == '0'          // false
//类型相同，毫无疑问，值不同，所以结果为false

0 == ''            // true
//String要像Number转化，''是空String，根据上面的表，转成0，所以结果是true

0 == '0'           // true
//String要像Number转化，根据上面的转化Number表，'0'转成0，所以结果是true

false == 'false'   // false
//有Boolean，转化成Number，所以第一步转化后为0=='false'；
//然后'false'向Number转，结果是NaN,最后变成比较0==NaN,那么肯定是false。
//（NaN和任何相比都是false，就算是自己也是false， NaN==NaN //false)

false == '0'       // true
//有Boolean，转化成Number，经过第一次转化就成了0=='0';
//就变成了上面的第3个例子，所以是true

false == undefined // false
//对于undefined和null，只有两边分别是两者才是true，其他都是false；所以是false

false == null      // false
//对于undefined和null，只有两边分别是两者才是true，其他都是false；所以是false

null == undefined  // true
//对于undefined和null，只有两边分别是两者才是true，其他都是false；所以是true

' \t\r\n ' == 0    // true
//对于String，先转成Number，对于空String，都将转成0，所以转化后成为0==0,结果为true
//（注意，空字符不仅仅是只是空格，还包括\t\r\n等等，更多可以见ECMAScript spec的9.3.1）
</code></pre>

<h2>总结</h2>

<p>虽然我们了解了==这个坏东西的本质，但是在我们的实际JavaScript编程中是要避免使用==，而是去使用===这个严格的比较运算符。</p>
]]></content>
  </entry>
  
</feed>
